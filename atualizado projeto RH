using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Text.Json;
using PROJETO_Conce_POO;
using System.ComponentModel;

namespace Projeto_RH
{
    internal class Program
    {
       public static  List<Clientes> lista_Cliente = new List<Clientes>();

        public static void CadastrarCliente(List<Clientes> lista_Cliente)
        {
            Clientes objCliente = new Clientes();
            objCliente.ChamarClienteCLasse();
             lista_Cliente.Add(objCliente);
            

        }

        public static void VizualizarCliente()
        {

            foreach( Clientes cliente in lista_Cliente)
            {
     Console.WriteLine($"Nome: {cliente.nome}, Idade: {cliente.idade}, Cargo: {cliente.Cargo}, cpf: {cliente.cpf}, data de nascimento: {cliente.data_nascimento}, Origem: {cliente.origem}, Salario: {cliente.Salario}, Cargo: {cliente.Cargo}");
            }


        }

        public static void MostrarHistoricoDeCompras(List<Clientes> listaClientes)
        {
            Console.WriteLine("Informe o ID do cliente para exibir o histórico de compras:");
            if (int.TryParse(Console.ReadLine(), out int idClienteHistorico))
            {
                Clientes clienteHistorico = listaClientes.FirstOrDefault(cliente => cliente.ID == idClienteHistorico);
                if (clienteHistorico != null)
                {
                    clienteHistorico.MostrarHistoricoCompras();
                }
                else
                {
                    Console.WriteLine("Cliente não encontrado.");
                }
            }
            else
            {
                Console.WriteLine("ID inválido.");
            }
        }

        public static void ExcluirClientePorID(List<Clientes> listaClientes)
        {
            Console.WriteLine("Informe o ID do cliente para excluir:");
            if (int.TryParse(Console.ReadLine(), out int idClienteExcluir))
            {
                Clientes.ExcluirClientePorID(listaClientes, idClienteExcluir);
            }
            else
            {
                Console.WriteLine("ID inválido.");
            }
        }


        static void ChamarMenu()
        {
            Console.WriteLine("--------MENU GERENCIADOR DE CONSSESIONARIA-----------");
            Console.WriteLine("1 : Clientes");
            Console.WriteLine("2 : Funcionários");
            Console.WriteLine("3 : Relógio Ponto");
            Console.WriteLine("4 : Sair");
        }

        static void ChamarSubMenuCliente()
        {
            Console.WriteLine("Escolha uma opção");
            Console.WriteLine("1 : Cadastrar");
            Console.WriteLine("2 : Vizualizar");
            Console.WriteLine("3 : Histórico de compras");
            Console.WriteLine("4 : Excluir");
            Console.WriteLine("5 : Sair");
        }

        static void ExecutarMenuCliente()
        {
            while (true)
            {
                ChamarSubMenuCliente();
                string opcao = Console.ReadLine();
                switch (opcao)
                {
                    case "1":
                        CadastrarCliente(lista_Cliente);
                        break;
                    case "2":
                        VizualizarCliente();
                        break;
                    case "3":
                        MostrarHistoricoDeCompras(lista_Cliente);
                        break;
                    case "4":
                        ExcluirClientePorID(lista_Cliente);
                        break;
                    default:
                        return;
                }
            }
        }

        static void ExecutarMenu()
        {
            while (true)
            {
                ChamarMenu();
                string opcao = Console.ReadLine();
                switch (opcao)
                {
                    case "1":
                        ExecutarMenuCliente();
                        break;
                    case "2":

                        break;
                    case "3":

                        break;
                    default:
                        Console.WriteLine("Até Mais!");
                        return;
                }
            }
        }

        static void Main(string[] args)
        {
            ExecutarMenu();
        }
    }
}

CLASSES

   using Projeto_RH;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PROJETO_Conce_POO
{
    internal class Clientes : Pessoas
    {

        public double Salario { get; set; }
        public string Cargo { get; set; }

        public int ID { get; set; }

        public List<string> HistoricoCompras { get; set; }


        public void ChamarClienteCLasse() {
        Console.WriteLine("Insira o nome do cliente");
            nome = Console.ReadLine();

        Console.WriteLine("Insira a idade do cliente");
            idade = Convert.ToInt32(Console.ReadLine());

        Console.WriteLine("Insira o cpf do cliente");
            cpf = Console.ReadLine();

        Console.WriteLine("Insira o nascimento do cliente");
            data_nascimento = Console.ReadLine();

        Console.WriteLine("Insira a origem do cliente");
            origem = Console.ReadLine();

        Console.WriteLine("Insira o salario cliente");
            Salario = Convert.ToInt32(Console.ReadLine());

        Console.WriteLine("Insira o cargo do cliente");
            Cargo = Console.ReadLine();

        }

        public void AdicionarCompra(string compra)
        {
            if (HistoricoCompras == null)
            {
                HistoricoCompras = new List<string>();
            }

            HistoricoCompras.Add(compra);
        }

        public void MostrarHistoricoCompras()
        {
            if (HistoricoCompras == null || HistoricoCompras.Count == 0)
            {
                Console.WriteLine("Nenhuma compra registrada.");
            }
            else
            {
                Console.WriteLine("Histórico de Compras:");
                foreach (string compra in HistoricoCompras)
                {
                    Console.WriteLine(compra);
                }
            }
        }


        public static void ExcluirClientePorID(List<Clientes> listaClientes, int id)
        {
            var clienteParaExcluir = listaClientes.FirstOrDefault(cliente => cliente.ID == id);
            if (clienteParaExcluir != null)
            {
                listaClientes.Remove(clienteParaExcluir);
                Console.WriteLine("Cliente excluído com sucesso.");
            }
            else
            {
                Console.WriteLine("Cliente não encontrado.");
            }
        }


    }
}


CLASSE PESSOAS

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace PROJETO_Conce_POO
{
    internal class Pessoas
    {


        public string nome { get; set; }
        public int idade { get; set; }
        public string cpf { get; set; }
        public string data_nascimento { get; set; }
        public string origem { get; set; }




    }





}
